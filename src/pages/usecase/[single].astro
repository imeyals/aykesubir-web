---
import config from "@/config/config.json";
import Base from "@/layouts/Base.astro";
import { getSinglePage } from "@/lib/contentParser.astro";
import { markdownify } from "@/lib/utils/textConverter";
import CallToAction from "@/partials/CallToAction.astro";
import Faq from "@/partials/Faq.astro";
import { Image } from "astro:assets";
import { getEntry } from "astro:content";

export async function getStaticPaths() {
  const usecasecards = await getSinglePage("usecase");

  const paths = usecasecards?.map((usecase) => ({
    params: {
      single: usecase.slug,
    },
    props: { usecase },
  }));

  return paths;
}

const call_to_action = await getEntry("sections", "call-to-action");
const { sticky_header } = config.settings;
const { usecase } = Astro.props;
const { title, meta_title, description, header, content, image, steps } =
  usecase.data;
---

<Base
  title={title}
  meta_title={meta_title}
  description={description}
  image={image}
>
  <section class={`section bg-section ${sticky_header && "pt-56"}`}>
    <div class="container">
      <div class="text-center lg:mb-28 lg:px-52">
        <h1 class="mb-4" set:html={markdownify(header ?? "")} />
        <p class="mb-10 text-[18px]" set:html={markdownify(content ?? "")} />
      </div>
    </div>
    <div class="container">
      <div class="content mb-10">
        {
          steps?.map((step, index) => (
            <div class="mb-14">
              <h1
                class="mb-4 text-center"
                set:html={markdownify(step.title ?? "")}
              />

              <div class="row md:g-6 items-center justify-center">
                <div class="col-10 lg:col-6">
                  <div>
                    <p set:html={markdownify(step.description ?? "")} />

                    {step?.points &&
                      step?.points?.map((point) => (
                        <div class="mb-4 flex items-baseline  lg:items-center">
                          <div>
                            <BsCheCallToActionmr-3 class=" rounded-full bg-primary text-xl" />
                          </div>
                          <p class="m-0 text-dark">{point}</p>
                        </div>
                      ))}
                  </div>
                </div>
                <div
                  class={`col-10 lg:col-6 ${
                    (index + 1) / 2 === 1 ? "order-first" : "order-last"
                  }`}
                >
                  <div>
                    {step.image && (
                      <Image
                        src={step.image}
                        class="w-auto"
                        width="598"
                        height="416"
                        alt="banner image"
                      />
                    )}
                  </div>
                </div>
              </div>
            </div>
          ))
        }
      </div>
    </div>
  </section>

  <Faq />
  <CallToAction call_to_action={call_to_action} className="pt-0" />
</Base>
